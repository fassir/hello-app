name: CI/CD Pipeline - Build, Push & Update ArgoCD Manifests

on:
  push:
    branches:
      - main # O workflow será executado sempre que houver um push na branch 'main'

env:
  DOCKER_IMAGE_NAME: fassir/hello-app # Substitua 'fassir' pelo seu Docker Hub username
  IMAGE_TAG: ${{ github.sha }}        # A tag da imagem será o hash completo do commit
  MANIFESTS_REPO_OWNER: fassir         # Substitua 'fassir' pelo seu GitHub username
  MANIFESTS_REPO_NAME: hello-manifests

jobs:
  build-and-push:
    runs-on: ubuntu-latest # O sistema operacional do runner do GitHub Actions

    steps:
      - name: Checkout application code
        uses: actions/checkout@v4 # Clona o repositório 'hello-app'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Configura o Buildx para builds Docker eficientes

      - name: Log in to Docker Hub
        uses: docker/login-action@v3 # Faz login no Docker Hub usando os segredos
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5 # Constrói e envia a imagem para o Docker Hub
        with:
          context: . # Usa o diretório atual como contexto de build
          push: true # Habilita o push para o registry
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }} # Tag com o SHA do commit
            ${{ env.DOCKER_IMAGE_NAME }}:latest               # Tag 'latest' também

      - name: Checkout ArgoCD manifests repository
        uses: actions/checkout@v4 # Clona o repositório 'hello-manifests' para este runner
        with:
          # Combina owner e name para o repositório completo
          repository: ${{ env.MANIFESTS_REPO_OWNER }}/${{ env.MANIFESTS_REPO_NAME }}
          # Onde o repositório de manifestos será clonado no sistema de arquivos do runner
          path: ${{ env.MANIFESTS_REPO_NAME }}
          # Chave SSH privada para autenticação e permissão de escrita
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Não é necessário um token GITHUB_TOKEN aqui, pois estamos usando SSH para escrever no outro repo

      - name: Update Kubernetes manifests
        run: |
          # Navega para o diretório clonado do 'hello-manifests' e entra na pasta 'k8s'
          # Certifique-se de que a pasta 'k8s' existe dentro do seu 'hello-manifests'
          cd ${{ env.MANIFESTS_REPO_NAME }}/k8s
          
          # Usa 'sed' para substituir a tag da imagem no deployment.yaml
          # Ele procura por 'image: fassir/hello-app:*' e substitui pela nova tag
          # Ajuste o 'fassir/hello-app' se seu DOCKER_IMAGE_NAME for diferente
          sed -i "s|image: ${{ env.DOCKER_IMAGE_NAME }}:.*|image: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}|" deployment.yaml
          
          # Opcional: Imprime o conteúdo do deployment.yaml nos logs para depuração
          echo "Updated deployment.yaml content:"
          cat deployment.yaml
        working-directory: ${{ github.workspace }} # Define o diretório de trabalho base

      - name: Create Pull Request for manifest changes
        uses: peter-evans/create-pull-request@v5 # Ação para criar um Pull Request
        with:
          # Use o GITHUB_TOKEN padrão para que esta ação tenha permissão de criar PRs
          # para o repositório de manifests no nome do GitHub Actions.
          token: ${{ secrets.GITHUB_TOKEN }}
          # Mensagem do commit para as alterações nos manifestos
          commit-message: "chore(app): Update hello-app image to ${{ env.IMAGE_TAG }}"
          # Nome da nova branch onde as alterações serão feitas no repo de manifests
          branch: update-image-${{ github.sha }}
          # Deleta a branch após o merge do PR
          delete-branch: true
          # Título do Pull Request
          title: "Update hello-app image to ${{ env.IMAGE_TAG }}"
          # Corpo (descrição) do Pull Request
          body: |
            Atualiza a imagem do `hello-app` no manifesto do Kubernetes para a tag `${{ env
